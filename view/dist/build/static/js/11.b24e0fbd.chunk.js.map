{"version":3,"sources":["Components/Logo/styles.module.css","Components/Logo/index.tsx","Components/NavBar/index.tsx","Containers/Dashboard/dashboard.module.css","Containers/Dashboard/PollDetails.tsx","Containers/Dashboard/MyPolls.tsx","Containers/Dashboard/Dashboard.tsx","Components/NavBar/navbar.module.css"],"names":["module","exports","Logo","className","styles","React","Component","Navbar","useState","window","innerWidth","width","setWidth","menu_open","setMenuOpen","addEventListener","menu","useRef","AppBar","sx","backgroundColor","maxWidth","Toolbar","Stack","direction","justifyContent","alignItems","IconButton","borderRadius","onClick","location","href","Typography","marginLeft","variant","color","fontFamily","fontWeight","letterSpacing","spacing","font","style","textDecoration","getIsAuth","pathname","includes","Button","textTransform","size","id","ref","e","PollDetails","props","ctx","canvas","chart","updateCanvas","destroy","grd","createLinearGradient","height","addColorStop","config","type","data","labels","options","map","opt","index","option","datasets","label","no_of_polls","maintainAspectRatio","responsive","plugins","title","display","align","text","legend","scales","yAxes","grid","drawBorder","ticks","xAxes","Chart","state","show_description","this","document","getElementById","getContext","question_title","total_votes","question_description","setState","ExpandMore","ExpandLess","Collapse","in","viewBox","fill","xmlns","cx","cy","r","Math","floor","MyPolls","displayNoPollsImage","a","fetch","res","svg","div","innerHTML","pollStatusTableData","questions_data","poll_data","expired","active","dataAttributes","expire_at","Date","getTime","created_time","poll_details_index","show_poll_details","no_of_visits","question_id","open_poll_search","length","user_name","xp","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","total_created_polls","total_visits","selected_poll","is_loading","error","SERVER_URL","method","credentials","mode","then","json","res_json","forEach","element","username","catch","err","console","CircularProgress","position","top","left","transform"],"mappings":"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","file":"static/js/11.b24e0fbd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"styles_logo__3cKcF\",\"container\":\"styles_container__2oyZY\",\"bar-1\":\"styles_bar-1__1BMPA\",\"animation\":\"styles_animation__ST-CD\",\"bar-2\":\"styles_bar-2__1N_JJ\",\"bar-3\":\"styles_bar-3__23G03\"};","import React from \"react\";\nimport styles from './styles.module.css';\n\nexport default class Logo extends React.Component {\n    \n    render(): React.ReactNode {\n        return (\n            <div className={styles['logo']}>\n                <div className={styles['container']}>\n                    <div className={styles['bar-1']} ></div>\n                    <div className={styles['bar-2']} ></div>\n                    <div className={styles['bar-3']} ></div>\n                </div>\n            </div>\n        )\n    }\n}\n","import { AppBar, Toolbar, IconButton, Typography, Stack, Button } from '@mui/material'\nimport { useRef, useState } from 'react'\nimport styles from './navbar.module.css';\nimport Logo from '../Logo/index'\nimport { getIsAuth } from '../../Utils/utils';\n\nexport default function Navbar() {\n    const [width, setWidth] = useState(window.innerWidth);\n    const [menu_open, setMenuOpen] = useState(false);\n    window.addEventListener('resize', function () {\n        setWidth(window.innerWidth);\n    })\n    const menu = useRef<HTMLDivElement>(null);\n\n    return (\n        <>\n            <AppBar sx={{ backgroundColor: '#ffff', maxWidth: '100vw' }} >\n                <Toolbar >\n                    <Stack direction={'row'} justifyContent={'space-between'} width='100%' alignItems={'center'} >\n                        <IconButton sx={{ borderRadius: '10px' }} onClick={()=>{window.location.href = '/'}}>\n                            <Logo />\n                            <Typography sx={{ marginLeft: '0.3rem' }} variant='h6' color={'primary'} fontFamily='Poppins, sans-serif' fontWeight={'bolder'} letterSpacing={'1px'}>Live poll</Typography>\n                        </IconButton>\n                        {width > 780 &&\n                            <Stack\n                                className={styles['links-container']}\n                                direction={'row'}\n                                justifyContent={'space-between'}\n                                alignItems={'center'} spacing={3}>\n                                <Typography sx={{ font: 'inherit' }} variant='body1'>\n                                    <a href={'/create'} style={{ color: 'inherit', textDecoration: 'none', font: 'inherit' }}>\n                                        Create\n                                    </a>\n                                </Typography>\n                                <Typography sx={{ font: 'inherit' }} variant='body1'>\n                                    <a href={'/#'} style={{ color: 'inherit', textDecoration: 'none', font: 'inherit' }}>\n                                        Explore\n                                    </a>\n                                </Typography>\n                                {(getIsAuth() && !window.location.pathname.includes('dashboard') )&&\n                                    <Typography sx={{ font: 'inherit' }} variant='body1'>\n                                        <a href={'/dashboard'} style={{ color: 'inherit', textDecoration: 'none', font: 'inherit' }}>\n                                            Dashboard\n                                        </a>\n                                    </Typography>}\n                                {!getIsAuth() &&\n                                    <Stack direction={'row'} justifyContent={'space-between'} alignItems={'center'} spacing={4} sx={{ marginLeft: '500px' }}>\n                                        <Typography sx={{ font: 'inherit' }} variant='body1'>\n                                            <a href={'/signup'} style={{ color: 'inherit', textDecoration: 'none', font: 'inherit' }}>\n                                                Sign up\n                                            </a>\n                                        </Typography>\n                                        <Button href='#' onClick={() => { window.location.href = '/signin' }} variant='contained' sx={{ textTransform: 'none' }} size='small'>Sign in</Button>\n                                    </Stack>\n                                }\n                            </Stack>\n                        }\n                        {\n                            width <= 780 &&\n                            <Stack\n                                id='nav-bar'\n                                data-open={menu_open}\n                                className={styles['links-container']}\n                                direction={'column'}\n                                justifyContent={'space-between'}\n                                ref={menu}\n                                alignItems={'flex-start'} spacing={1.5}>\n                                <Typography sx={{ font: 'inherit', marginLeft: '0.3rem' }} variant='body1'>\n                                    <a href={'/create'} style={{ color: 'inherit', textDecoration: 'none', font: 'inherit' }}>\n                                        Create\n                                    </a>\n                                </Typography>\n                                <span ></span>\n                                <Typography sx={{ font: 'inherit' }} variant='body1'>\n                                    <a href={'/#'} style={{ color: 'inherit', textDecoration: 'none', font: 'inherit' }}>\n                                        Explore\n                                    </a>\n                                </Typography>\n                                <span ></span>\n\n                                {(getIsAuth() && !window.location.pathname.includes('dashboard') ) &&\n                                    <Typography sx={{ font: 'inherit' }} variant='body1'>\n                                        <a href={'/dashboard'} style={{ color: 'inherit', textDecoration: 'none', font: 'inherit' }}>\n                                            Dashboard\n                                        </a>\n                                    </Typography>\n                                }\n                                {!getIsAuth() &&\n                                    <>\n                                        <Typography sx={{ font: 'inherit' }} variant='body1'>\n                                            <a href={'/signup'} style={{ color: 'inherit', textDecoration: 'none', font: 'inherit' }}>\n                                                Sign Up\n                                            </a>\n                                        </Typography>\n                                        <span ></span>\n                                        <Button\n                                            variant='contained'\n                                            onClick={() => { window.location.href = '/signin' }}\n                                            sx={{ textTransform: 'none' }} size='small'>\n                                            Sign In\n                                        </Button>\n                                    </>\n                                }\n                            </Stack>\n                        }\n                        <div className={styles['menu']} id='menu' data-open={menu_open} onClick={(e) => {\n                            if (menu_open) {\n                                setMenuOpen(false); return\n                            } setMenuOpen(true); return\n                        }\n                        }>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                        </div>\n                    </Stack>\n                </Toolbar>\n            </AppBar>\n        </>\n    )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"dashboard_container__2dr1Z\",\"wrapper\":\"dashboard_wrapper__1-ucN\",\"menu-container\":\"dashboard_menu-container__6pOW0\",\"menu\":\"dashboard_menu__3GBmj\",\"menu-item\":\"dashboard_menu-item__ngSha\",\"menu-btn\":\"dashboard_menu-btn__wogDn\",\"center-container\":\"dashboard_center-container__1luvp\",\"center-wrapper\":\"dashboard_center-wrapper__2va_D\",\"center-top\":\"dashboard_center-top__2UzkP\",\"overall-container\":\"dashboard_overall-container__29BJ9\",\"overall-wrapper\":\"dashboard_overall-wrapper__cY-gC\",\"poll-search\":\"dashboard_poll-search__3ToNw\",\"poll-status-table-container\":\"dashboard_poll-status-table-container__1F5qn\",\"poll-status-table\":\"dashboard_poll-status-table__3uP1T\",\"no-data-container\":\"dashboard_no-data-container__198Mi\",\"no-data-svg-animation-top\":\"dashboard_no-data-svg-animation-top__DSlGJ\",\"no-data-svg-animation-bottom\":\"dashboard_no-data-svg-animation-bottom__15yhf\",\"details-container\":\"dashboard_details-container__3GeAv\",\"details-wrapper\":\"dashboard_details-wrapper__12JH6\",\"poll-details\":\"dashboard_poll-details__3zNUS\",\"details-description\":\"dashboard_details-description__3pbAJ\",\"vote-chart\":\"dashboard_vote-chart__3PJmW\",\"poll-percentages\":\"dashboard_poll-percentages__3RKGm\",\"poll-details-overlay\":\"dashboard_poll-details-overlay__14auF\"};","import React, { Component } from 'react'\nimport styles from './dashboard.module.css';\nimport { ExpandLess, ExpandMore } from '@mui/icons-material';\nimport Chart, { ChartConfiguration, } from 'chart.js/auto'\nimport { Collapse } from '@mui/material';\ninterface Props {\n    created_by: string,\n    created_date: string,\n    created_time: string,\n    expire_at: string | null,\n    options: [],\n    question: string,\n    question_description: string,\n    question_id: string,\n    question_title: string\n    total_votes: number,\n    no_of_visits: number\n}\ninterface State {\n    show_description: boolean;\n}\n\n\n\nclass PollDetails extends Component<Props, State> {\n    ctx: CanvasRenderingContext2D | null = null;\n    canvas: HTMLCanvasElement | null = null;\n    chart: Chart | null = null;\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            show_description: false,\n        }\n    }\n    updateCanvas = () => {\n        if (this.canvas && this.ctx) {\n            this.chart?.destroy();\n            var grd = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);\n            grd.addColorStop(0, '#94DAFF');\n            grd.addColorStop(1, '#B91AFF');\n\n            const config: ChartConfiguration = {\n                type: 'bar',\n                data: {\n                    labels: this.props.options?.map((opt: any, index) => {\n                        return (opt.option as string);\n                    }),\n                    datasets: [{\n                        label: 'Votes',\n                        data: this.props.options?.map((opt: any, index) => {\n                            return (opt.no_of_polls as number);\n                        }),\n                        backgroundColor: grd\n                    }]\n                }, options: {\n                    maintainAspectRatio: false,\n                    responsive: true,\n                    plugins: {\n                        title: { display: true, align: 'center', color: '#ffff', text: 'votes graph' }\n                        , legend: { display: false }\n                    },\n\n                    scales: {\n                        yAxes: {\n                            grid: {\n                                drawBorder: true,\n                                color: '#4C3C77',\n                            },\n                            ticks: {\n                                color: 'hsla(0,0%,100%,0.8)'\n                            }\n                        },\n                        xAxes: {\n                            grid: {\n                                drawBorder: true,\n                                color: '#4C3C77',\n                            },\n                            ticks: {\n                                color: 'hsla(0,0%,100%,0.8)'\n                            }\n                        },\n\n                    }\n                }\n            }\n            this.chart = new Chart(this.ctx, config);\n        }\n    }\n    componentDidUpdate() {\n        this.updateCanvas();\n    }\n    componentDidMount() {\n\n        this.canvas = document.getElementById('chart-canvas') as HTMLCanvasElement;\n        if (this.canvas) {\n            this.canvas.height = 350\n            // this.canvas.width \n            this.ctx = this.canvas.getContext('2d');\n            this.updateCanvas();\n        }\n\n    }\n    render(): React.ReactNode {\n\n        return (\n            <>\n                <div className={styles['details-container']} >\n                    <div className={styles['details-wrapper']}>\n                        <h3>Details</h3>\n                        <hr></hr>\n                        <div className={styles['poll-details']}>\n                            <div>\n                                <p>Title:</p>\n                                <p>{this.props.question_title}</p>\n                            </div>\n                            <div>\n                                <p>Total votes:</p>\n                                <p>{this.props.total_votes}</p>\n                            </div>\n                            <div>\n                                <p>Expires at:</p>\n                                <p></p>\n                            </div>\n                            {this.props.question_description &&\n                                <div className={styles['details-description']}>\n                                    <div onClick={() => { this.setState({ show_description: !this.state.show_description }) }}>\n                                        {this.state.show_description && <p>Show description</p>}\n                                        {!this.state.show_description && <p>Hide description</p>}\n                                        {this.state.show_description ? <ExpandMore /> : <ExpandLess />}\n                                    </div>\n                                    <Collapse in={this.state.show_description}>\n                                        <p>{this.props.question_description}</p>\n                                    </Collapse>\n                                </div>\n                            }\n                        </div>\n                        <div className={styles['vote-chart']}>\n                            <canvas id='chart-canvas'></canvas>\n                        </div>\n                        <div className={styles['poll-percentages']}>\n                            {this.props.options.map((opt: any, index) => {\n\n                                return (\n                                    <div key={index}>\n                                        <svg width=\"9\" height=\"9\" viewBox=\"0 0 9 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                            <circle cx=\"4.5\" cy=\"4.5\" r=\"4.5\" fill=\"#8593ED\" />\n                                        </svg>\n                                        <div>\n                                            <span>{opt.option}</span>\n                                            <span>{Math.floor((opt.no_of_polls / this.props.total_votes) * 100)}%</span>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default PollDetails;","import { Component, ReactNode, } from 'react'\nimport PollDetails from './PollDetails';\nimport styles from './dashboard.module.css';\n// import './dashboard.css'\ninterface Props {\n    user_name: string;\n    xp: number;\n    total_created_polls: number;\n    questions_data: {\n        created_by: string, created_date: string, created_time: string,\n        expire_at: string | null,\n        options: [], question: string,\n        question_description: string,\n        question_id: string,\n        question_title: string\n        total_votes: number,\n        no_of_visits: number\n    }[],\n    total_visits: number;\n    total_votes: number;\n}\ninterface State {\n    open_poll_search: boolean;\n    poll_details_index: number;\n    show_poll_details: boolean;\n    width: number;\n}\nexport default class MyPolls extends Component<Props, State>{\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            open_poll_search: false,\n            poll_details_index: 0,\n            show_poll_details: true, width: window.innerWidth\n        }\n    }\n    displayNoPollsImage = async () => {\n        const res = await fetch('media/illustrations/no_data.svg');\n        const svg = await res.text();\n        let div = document.getElementById('no-data-container');\n        if (div) {\n            div.innerHTML = svg + '<p>No polls created.</p>'\n        }\n    }\n    async componentDidMount() {\n        if (window.innerWidth <= 1280) {\n            this.setState({ show_poll_details: false })\n        }\n        window.addEventListener('resize', () => {\n            if (window.innerWidth > 780) { this.setState({ show_poll_details: true }) ;}\n            this.setState({ width: window.innerWidth });\n        })\n        if (this.props.questions_data.length >= 0) {\n            await this.displayNoPollsImage();\n        }\n    }\n    pollStatusTableData = () => {\n        return (\n            <>\n                {this.props.questions_data.map((poll_data, index) => {\n                    let expired = false;\n                    let active = false;\n                    let dataAttributes: any = {}\n                    if (poll_data.expire_at) {\n                        let differ = new Date(poll_data.expire_at).getTime() - new Date(poll_data.created_time).getTime();\n                        if (differ <= 0) {\n                            expired = true; active = false;\n                            dataAttributes['data-expired'] = true;\n                        } else {\n                            expired = false;\n                            active = true;\n                            dataAttributes['data-active'] = true;\n                        }\n                    } else {\n                        dataAttributes['data-noexpire'] = true;\n                    }\n                    return (\n                        <tr key={index} onClick={() => {\n                            this.setState({ poll_details_index: index, show_poll_details: true });\n                        }} >\n                            <td><p>{poll_data.question_title}</p></td>\n                            <td><p>{poll_data.total_votes}</p></td>\n                            <td><p>{poll_data.no_of_visits}</p></td>\n                            <td><p>{poll_data.question_id}</p></td>\n                            <td {...dataAttributes}\n                            >\n                                <div>\n                                    {!poll_data.expire_at && <p>NO EXPIRATION</p>}\n                                    {expired && <p>CLOSED</p>}\n                                    {active && <p>ACTIVE</p>}\n                                </div>\n                            </td>\n                        </tr>\n                    )\n                })}\n            </>\n        )\n    }\n    render(): ReactNode {\n\n        return (\n            <div className={styles['center-container']} >\n                <div className={styles['center-wrapper']} >\n                    <div className={styles['center-top']}>\n                        <div style={{ display: 'flex', alignItems: 'baseline' }}>\n                            <h3>Hi,</h3><p>{this.props.user_name}</p>\n                        </div>\n\n                        <div style={{ display: 'flex', alignItems: 'baseline' }}>\n                            <p>{this.props.xp}\n                            </p>\n                            <sub>xp</sub></div>\n                    </div>\n\n\n                    <div className={styles['overall-container']}>\n                        <h3 className={styles['overall-heading']}>Overall status</h3>\n                        <div className={styles['overall-wrapper']}>\n                            <div>\n                                <div>\n                                    <div>\n                                        <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                            <path d=\"M2 12.8H9.71429V38H2V12.8ZM16.4 2H23.6V38H16.4V2ZM30.8 22.5714H38V38H30.8V22.5714Z\" stroke=\"#2E2C3F\" strokeWidth=\"2.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                        </svg>\n                                    </div>\n                                </div>\n                                <span>{this.props.total_created_polls}</span>\n                                <span>Created polls</span>\n                            </div>\n\n                            <div>\n                                <div>\n                                    <div>\n                                        <svg width=\"38\" height=\"29\" viewBox=\"0 0 38 29\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                            <path d=\"M1 14.0909C1 14.0909 7.54545 1 19 1C30.4545 1 37 14.0909 37 14.0909C37 14.0909 30.4545 27.1818 19 27.1818C7.54545 27.1818 1 14.0909 1 14.0909Z\" stroke=\"#2E2C3F\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                            <path d=\"M18.9999 19.0001C21.7111 19.0001 23.909 16.8022 23.909 14.091C23.909 11.3798 21.7111 9.18188 18.9999 9.18188C16.2887 9.18188 14.0908 11.3798 14.0908 14.091C14.0908 16.8022 16.2887 19.0001 18.9999 19.0001Z\" stroke=\"#968AF4\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                        </svg>\n                                    </div>\n                                </div>\n                                <span>{this.props.total_visits}</span>\n                                <span>Visits</span>\n                            </div>\n\n                            <div>\n                                <div>\n                                    <div>\n                                        <svg width=\"37\" height=\"31\" viewBox=\"0 0 37 31\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                            <path d=\"M26.4545 29.6363V26.4545C26.4545 24.7667 25.7841 23.1481 24.5907 21.9547C23.3973 20.7613 21.7787 20.0908 20.0909 20.0908H7.36364C5.6759 20.0908 4.05728 20.7613 2.86387 21.9547C1.67045 23.1481 1 24.7667 1 26.4545V29.6363\" stroke=\"#2E2C3F\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                            <path d=\"M13.7269 13.7273C17.2415 13.7273 20.0906 10.8782 20.0906 7.36364C20.0906 3.8491 17.2415 1 13.7269 1C10.2124 1 7.36328 3.8491 7.36328 7.36364C7.36328 10.8782 10.2124 13.7273 13.7269 13.7273Z\" stroke=\"#2E2C3F\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                            <path d=\"M36.0003 29.6362V26.4544C35.9992 25.0444 35.5299 23.6747 34.6661 22.5604C33.8022 21.446 32.5927 20.6501 31.2275 20.2976\" stroke=\"#2E2C3F\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                            <path d=\"M24.8633 1.20654C26.2321 1.55702 27.4454 2.35311 28.3118 3.46931C29.1782 4.58551 29.6485 5.95832 29.6485 7.37132C29.6485 8.78431 29.1782 10.1571 28.3118 11.2733C27.4454 12.3895 26.2321 13.1856 24.8633 13.5361\" stroke=\"#2E2C3F\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                        </svg>\n                                    </div>\n                                </div>\n                                <span>{this.props.total_votes}</span>\n                                <span>Votes</span>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className={styles['poll-status-container']}>\n                        <h3>Poll status</h3>\n                        {this.props.questions_data.length > 0 &&\n                            <>\n                                <div className={styles['poll-status-wrapper']}>\n                                    <div className={styles['poll-search']} data-open={this.state.open_poll_search}\n                                        onClick={() => {\n                                            this.setState({ open_poll_search: !this.state.open_poll_search })\n                                        }}\n                                    >\n                                        <div>\n                                            <svg width=\"21\" height=\"21\" viewBox=\"0 0 21 21\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                <path d=\"M15.0086 13.2075H14.06L13.7238 12.8834C14.9005 11.5146 15.6089 9.73756 15.6089 7.80446C15.6089 3.494 12.1149 0 7.80446 0C3.494 0 0 3.494 0 7.80446C0 12.1149 3.494 15.6089 7.80446 15.6089C9.73756 15.6089 11.5146 14.9005 12.8834 13.7238L13.2075 14.06V15.0086L19.211 21L21 19.211L15.0086 13.2075ZM7.80446 13.2075C4.81475 13.2075 2.40137 10.7942 2.40137 7.80446C2.40137 4.81475 4.81475 2.40137 7.80446 2.40137C10.7942 2.40137 13.2075 4.81475 13.2075 7.80446C13.2075 10.7942 10.7942 13.2075 7.80446 13.2075Z\" fill=\"#423F5A\" />\n                                            </svg>\n                                        </div>\n\n                                        <input />\n\n                                    </div>\n                                </div>\n                                <div className={styles['poll-status-table-container']}>\n                                    <table className={styles['poll-status-table']}>\n                                        <thead>\n                                            <tr>\n                                                <th>Title</th>\n                                                <th>Votes</th>\n                                                <th>Views</th>\n                                                <th>Poll Id</th>\n                                                <th>Status</th>\n                                            </tr>\n\n                                        </thead>\n                                        <tbody>\n                                            {this.pollStatusTableData()}\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </>\n                        }{this.props.questions_data.length <= 0 &&\n                            <div className={styles['no-data-container']} id='no-data-container'> </div>\n                        }\n                    </div>\n                </div>\n                {this.props.questions_data.length > 0 && this.state.show_poll_details &&\n                    <>\n                        {this.state.width <= 1280 &&\n                            <div className={styles['poll-details-overlay']} onClick={() => { this.setState({ show_poll_details: false }) }} ></div>\n                        }\n                        <PollDetails {...this.props.questions_data[this.state.poll_details_index]} />\n                    </>\n                }\n            </div>\n        )\n    }\n}\n","import { CircularProgress } from '@mui/material';\nimport { Component } from 'react'\nimport Navbar from '../../Components/NavBar'\nimport { SERVER_URL } from '../../config'\nimport styles from './dashboard.module.css'\nimport MyPolls from './MyPolls';\ninterface Props {\n\n}\ninterface State {\n    user_name: string;\n    xp: number;\n    total_created_polls: number;\n    total_visits: number;\n    total_votes: number;\n    open_poll_search: boolean;\n    questions_data: {\n        created_by: string, created_date: string, created_time: string,\n        expire_at: string | null,\n        options: [], question: string,\n        question_description: string,\n        question_id: string,\n        question_title: string\n        total_votes: number,\n        no_of_visits: number\n    }[],\n    selected_poll: number;\n    is_loading: boolean;\n    error: boolean;\n\n}\n\nexport default class index extends Component<Props, State> {\n    state: Readonly<State> = {\n        user_name: '',\n        total_created_polls: -1,\n        total_visits: -1,\n        total_votes: -1,\n        xp: -1,\n        open_poll_search: false,\n        questions_data: [],\n        selected_poll: -1,\n        is_loading: true,\n        error: false\n    }\n\n    componentDidMount() {\n        fetch(`${SERVER_URL}/dashboard`, { method: 'GET', credentials: 'include', mode: 'cors', }).then(res => {\n            res.json().then(res_json => {\n                if (res_json.error) {\n                    window.location.href = '/signin'; return;\n                }\n                let total_visits = 0\n                let total_votes = 0\n                res_json.questions_data.forEach((element: any) => {\n                    total_visits += element.no_of_visits;\n                    element.options.forEach((opt: any) => {\n                        total_votes += opt.no_of_polls\n                    }\n                    )\n                });\n                this.setState({\n                    user_name: res_json.username,\n                    total_visits,\n                    total_created_polls: res_json.questions_data.length,\n                    xp: res_json.xp,\n                    total_votes,\n                    questions_data: res_json.questions_data,\n                    is_loading: false,\n                    error: false,\n                })\n            })\n        }).catch(err => {\n            this.setState({\n                is_loading: false,\n                error: true\n            })\n            console.error(err)\n        })\n\n    }\n    // async getErrorSvg() {\n    //     let res = fetch('/media/illustrations/error_illustration.svg');\n    //     let svg =  (await res).text();\n\n    // }\n    render() {\n        return (\n            <div className={styles['container']} >\n                <Navbar />\n                <div className={styles['wrapper']} >\n                    {!this.state.is_loading && !this.state.error &&\n                        <>\n                            <div className={styles['menu-container']}>\n                                <div className={styles['menu']}>\n                                    <p>Dashboard</p>\n                                    <div>\n                                        <div className={styles['menu-item']} data-selected='true'>\n                                            <svg width=\"18\" height=\"24\" viewBox=\"0 0 14 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                <path d=\"M13 17V7\" stroke=\"white\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                                <path d=\"M7 17V1\" stroke=\"white\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                                <path d=\"M1 17V11\" stroke=\"white\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />:\n                                            </svg>\n\n                                            <p>My polls</p>\n                                        </div>\n                                        <div className={styles['menu-item']} >\n\n                                            <svg width=\"18\" height=\"20\" viewBox=\"0 0 18 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" > <path d=\"M17 19V17C17 15.9391 16.5786 14.9217 15.8284 14.1716C15.0783 13.4214 14.0609 13 13 13H5C3.93913 13 2.92172 13.4214 2.17157 14.1716C1.42143 14.9217 1 15.9391 1 17V19\" stroke=\"#656284\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" /> <path d=\"M9 9C11.2091 9 13 7.20914 13 5C13 2.79086 11.2091 1 9 1C6.79086 1 5 2.79086 5 5C5 7.20914 6.79086 9 9 9Z\" stroke=\"#656284\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" /> </svg>\n                                            <p>Profile</p>\n                                        </div>\n                                        <div className={styles['menu-item']}>\n                                            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                <path d=\"M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z\" stroke=\"#656284\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                                <path d=\"M19.4 15C19.2669 15.3016 19.2272 15.6362 19.286 15.9606C19.3448 16.285 19.4995 16.5843 19.73 16.82L19.79 16.88C19.976 17.0657 20.1235 17.2863 20.2241 17.5291C20.3248 17.7719 20.3766 18.0322 20.3766 18.295C20.3766 18.5578 20.3248 18.8181 20.2241 19.0609C20.1235 19.3037 19.976 19.5243 19.79 19.71C19.6043 19.896 19.3837 20.0435 19.1409 20.1441C18.8981 20.2448 18.6378 20.2966 18.375 20.2966C18.1122 20.2966 17.8519 20.2448 17.6091 20.1441C17.3663 20.0435 17.1457 19.896 16.96 19.71L16.9 19.65C16.6643 19.4195 16.365 19.2648 16.0406 19.206C15.7162 19.1472 15.3816 19.1869 15.08 19.32C14.7842 19.4468 14.532 19.6572 14.3543 19.9255C14.1766 20.1938 14.0813 20.5082 14.08 20.83V21C14.08 21.5304 13.8693 22.0391 13.4942 22.4142C13.1191 22.7893 12.6104 23 12.08 23C11.5496 23 11.0409 22.7893 10.6658 22.4142C10.2907 22.0391 10.08 21.5304 10.08 21V20.91C10.0723 20.579 9.96512 20.258 9.77251 19.9887C9.5799 19.7194 9.31074 19.5143 9 19.4C8.69838 19.2669 8.36381 19.2272 8.03941 19.286C7.71502 19.3448 7.41568 19.4995 7.18 19.73L7.12 19.79C6.93425 19.976 6.71368 20.1235 6.47088 20.2241C6.22808 20.3248 5.96783 20.3766 5.705 20.3766C5.44217 20.3766 5.18192 20.3248 4.93912 20.2241C4.69632 20.1235 4.47575 19.976 4.29 19.79C4.10405 19.6043 3.95653 19.3837 3.85588 19.1409C3.75523 18.8981 3.70343 18.6378 3.70343 18.375C3.70343 18.1122 3.75523 17.8519 3.85588 17.6091C3.95653 17.3663 4.10405 17.1457 4.29 16.96L4.35 16.9C4.58054 16.6643 4.73519 16.365 4.794 16.0406C4.85282 15.7162 4.81312 15.3816 4.68 15.08C4.55324 14.7842 4.34276 14.532 4.07447 14.3543C3.80618 14.1766 3.49179 14.0813 3.17 14.08H3C2.46957 14.08 1.96086 13.8693 1.58579 13.4942C1.21071 13.1191 1 12.6104 1 12.08C1 11.5496 1.21071 11.0409 1.58579 10.6658C1.96086 10.2907 2.46957 10.08 3 10.08H3.09C3.42099 10.0723 3.742 9.96512 4.0113 9.77251C4.28059 9.5799 4.48572 9.31074 4.6 9C4.73312 8.69838 4.77282 8.36381 4.714 8.03941C4.65519 7.71502 4.50054 7.41568 4.27 7.18L4.21 7.12C4.02405 6.93425 3.87653 6.71368 3.77588 6.47088C3.67523 6.22808 3.62343 5.96783 3.62343 5.705C3.62343 5.44217 3.67523 5.18192 3.77588 4.93912C3.87653 4.69632 4.02405 4.47575 4.21 4.29C4.39575 4.10405 4.61632 3.95653 4.85912 3.85588C5.10192 3.75523 5.36217 3.70343 5.625 3.70343C5.88783 3.70343 6.14808 3.75523 6.39088 3.85588C6.63368 3.95653 6.85425 4.10405 7.04 4.29L7.1 4.35C7.33568 4.58054 7.63502 4.73519 7.95941 4.794C8.28381 4.85282 8.61838 4.81312 8.92 4.68H9C9.29577 4.55324 9.54802 4.34276 9.72569 4.07447C9.90337 3.80618 9.99872 3.49179 10 3.17V3C10 2.46957 10.2107 1.96086 10.5858 1.58579C10.9609 1.21071 11.4696 1 12 1C12.5304 1 13.0391 1.21071 13.4142 1.58579C13.7893 1.96086 14 2.46957 14 3V3.09C14.0013 3.41179 14.0966 3.72618 14.2743 3.99447C14.452 4.26276 14.7042 4.47324 15 4.6C15.3016 4.73312 15.6362 4.77282 15.9606 4.714C16.285 4.65519 16.5843 4.50054 16.82 4.27L16.88 4.21C17.0657 4.02405 17.2863 3.87653 17.5291 3.77588C17.7719 3.67523 18.0322 3.62343 18.295 3.62343C18.5578 3.62343 18.8181 3.67523 19.0609 3.77588C19.3037 3.87653 19.5243 4.02405 19.71 4.21C19.896 4.39575 20.0435 4.61632 20.1441 4.85912C20.2448 5.10192 20.2966 5.36217 20.2966 5.625C20.2966 5.88783 20.2448 6.14808 20.1441 6.39088C20.0435 6.63368 19.896 6.85425 19.71 7.04L19.65 7.1C19.4195 7.33568 19.2648 7.63502 19.206 7.95941C19.1472 8.28381 19.1869 8.61838 19.32 8.92V9C19.4468 9.29577 19.6572 9.54802 19.9255 9.72569C20.1938 9.90337 20.5082 9.99872 20.83 10H21C21.5304 10 22.0391 10.2107 22.4142 10.5858C22.7893 10.9609 23 11.4696 23 12C23 12.5304 22.7893 13.0391 22.4142 13.4142C22.0391 13.7893 21.5304 14 21 14H20.91C20.5882 14.0013 20.2738 14.0966 20.0055 14.2743C19.7372 14.452 19.5268 14.7042 19.4 15V15Z\" stroke=\"#656284\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                            </svg>\n                                            <p>Settings</p>\n                                        </div>\n                                    </div>\n                                </div>\n                                {/* <div className={styles['menu-btn']}>\n                                    <div></div>\n                                    <div></div>\n                                </div> */}\n                            </div>\n                            <MyPolls {...this.state} />\n                        </>\n                    }\n                    {\n                        this.state.is_loading &&\n                        <CircularProgress style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%,-50%)' }} />\n                    }\n                 \n                </div>\n            </div>\n        )\n    }\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"links-container\":\"navbar_links-container__YEkT3\",\"menu\":\"navbar_menu__2TCgy\"};"],"sourceRoot":""}